(self.webpackChunk_shopware_ag_meteor_component_library=self.webpackChunk_shopware_ag_meteor_component_library||[]).push([[46572],{"./src/components/form/sw-colorpicker/sw-colorpicker.interactive.stories.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{VisualTestChangeColorpickerColor:function(){return VisualTestChangeColorpickerColor},VisualTestChangeColorpickerLabel:function(){return VisualTestChangeColorpickerLabel},VisualTestChangeColorpickerOutputHex:function(){return VisualTestChangeColorpickerOutputHex},VisualTestChangeColorpickerOutputHexAlpha:function(){return VisualTestChangeColorpickerOutputHexAlpha},VisualTestChangeColorpickerOutputHsl:function(){return VisualTestChangeColorpickerOutputHsl},VisualTestChangeColorpickerOutputHslAlpha:function(){return VisualTestChangeColorpickerOutputHslAlpha},VisualTestChangeColorpickerOutputRgb:function(){return VisualTestChangeColorpickerOutputRgb},VisualTestChangeColorpickerOutputRgbAlpha:function(){return VisualTestChangeColorpickerOutputRgbAlpha},VisualTestColorpickerClearValue:function(){return VisualTestColorpickerClearValue},VisualTestColorpickerDisabled:function(){return VisualTestColorpickerDisabled},VisualTestColorpickerDisabledColorLabels:function(){return VisualTestColorpickerDisabledColorLabels},VisualTestColorpickerReadonly:function(){return VisualTestColorpickerReadonly},VisualTestColorpickerWithHelpText:function(){return VisualTestColorpickerWithHelpText},VisualTestColorpickerWithoutAlpha:function(){return VisualTestColorpickerWithoutAlpha},VisualTestOpenColorpicker:function(){return VisualTestOpenColorpicker},VisualTestRenderColorpicker:function(){return VisualTestRenderColorpicker}});var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,tslib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),_storybook_jest__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/jest/dist/esm/index.js"),_sw_colorpicker_stories__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/form/sw-colorpicker/sw-colorpicker.stories.ts");__webpack_exports__.default=Object.assign(Object.assign({},_sw_colorpicker_stories__WEBPACK_IMPORTED_MODULE_2__.default),{title:"Interaction Tests/Form/sw-colorpicker"});const VisualTestRenderColorpicker={name:"Render colorpicker"},VisualTestOpenColorpicker={name:"Open colorpicker",args:{value:"rgba(72, 228, 37, 0.81)"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const pickerToggle=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const popover=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]),colorRange=popover.getByLabelText("colorpicker-color-range"),alphaRange=popover.getByLabelText("colorpicker-alpha-range"),hexInput=popover.getByLabelText("hex-value"),redInput=popover.getByLabelText("red-value"),greenInput=popover.getByLabelText("green-value"),blueInput=popover.getByLabelText("blue-value"),alphaInput=popover.getByLabelText("alpha-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorRange).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorRange.value).toEqual("109"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaRange).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaRange.value).toEqual("0.81"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#48e425cf"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(redInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(redInput.value).toEqual("72"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(greenInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(greenInput.value).toEqual("228"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(blueInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(blueInput.value).toEqual("37"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaInput.value).toEqual("81")}))},VisualTestChangeColorpickerColor={name:"Change colorpicker color",args:{value:"rgba(72, 228, 37, 0.81)"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const pickerToggle=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const popover=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]),colorRange=popover.getByLabelText("colorpicker-color-range"),alphaRange=popover.getByLabelText("colorpicker-alpha-range"),hexInput=popover.getByLabelText("hex-value"),redInput=popover.getByLabelText("red-value"),greenInput=popover.getByLabelText("green-value"),blueInput=popover.getByLabelText("blue-value"),alphaInput=popover.getByLabelText("alpha-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorRange).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorRange.value).toEqual("109"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaRange).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaRange.value).toEqual("0.81"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#48e425cf"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(redInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(redInput.value).toEqual("72"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(greenInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(greenInput.value).toEqual("228"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(blueInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(blueInput.value).toEqual("37"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaInput.value).toEqual("81"),_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.BX.input(colorRange,{target:{value:300}}),_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.BX.input(alphaRange,{target:{value:1}}),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorRange.value).toEqual("300"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaRange.value).toEqual("1"),yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.clear(redInput),yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.type(redInput,"240"),yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.clear(greenInput),yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.type(greenInput,"60"),yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.clear(blueInput),yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.type(blueInput,"150"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(redInput.value).toEqual("240"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(greenInput.value).toEqual("60"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(blueInput.value).toEqual("150"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#f03c96")}))},VisualTestChangeColorpickerLabel={name:"Change colorpicker label",args:{label:"Another label"}},VisualTestChangeColorpickerOutputHex={name:"Change colorpicker output to HEX",args:{label:"Should output HEX",colorOutput:"hex"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement),pickerToggle=canvas.getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const hexInput=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]).getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff5");const colorValue=canvas.getByLabelText("colorpicker-color-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue.value).toEqual("#0fcff5")}))},VisualTestChangeColorpickerOutputHsl={name:"Change colorpicker output to HSL",args:{label:"Should output HSL",colorOutput:"hsl"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement),pickerToggle=canvas.getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const hexInput=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]).getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff5");const colorValue=canvas.getByLabelText("colorpicker-color-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue.value).toEqual("hsl(190, 92%, 51%)")}))},VisualTestChangeColorpickerOutputRgb={name:"Change colorpicker output to RGB",args:{label:"Should output RGB",colorOutput:"rgb"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement),pickerToggle=canvas.getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const hexInput=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]).getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff5");const colorValue=canvas.getByLabelText("colorpicker-color-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue.value).toEqual("rgb(15, 207, 245)")}))},VisualTestChangeColorpickerOutputHexAlpha={name:"Change colorpicker output to HEX alpha",args:{value:"#0fcff582",label:"Should output HEX",colorOutput:"hex"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement),pickerToggle=canvas.getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const hexInput=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]).getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff582");const colorValue=canvas.getByLabelText("colorpicker-color-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue.value).toEqual("#0fcff582")}))},VisualTestChangeColorpickerOutputHslAlpha={name:"Change colorpicker output to HSL alpha",args:{value:"#0fcff582",label:"Should output HSL",colorOutput:"hsl"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement),pickerToggle=canvas.getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const hexInput=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]).getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff582");const colorValue=canvas.getByLabelText("colorpicker-color-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue.value).toEqual("hsla(190, 92%, 51%, 0.51)")}))},VisualTestChangeColorpickerOutputRgbAlpha={name:"Change colorpicker output to RGB alpha",args:{label:"Should output RGB",value:"#0fcff582",colorOutput:"rgb"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement),pickerToggle=canvas.getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const hexInput=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]).getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff582");const colorValue=canvas.getByLabelText("colorpicker-color-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue.value).toEqual("rgba(15, 207, 245, 0.51)")}))},VisualTestColorpickerWithoutAlpha={name:"Render colorpicker without alpha",args:{label:"Should render without alpha value",alpha:!1},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const pickerToggle=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const popover=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]),hexInput=popover.getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff5");const alphaInput=popover.queryByLabelText("alpha-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaInput).toEqual(null)}))},VisualTestColorpickerDisabled={name:"Render disabled colorpicker",args:{label:"Should render disabled colorpicker",disabled:!0},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const pickerToggle=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(document.getElementsByClassName("sw-popover__wrapper").length).toEqual(0)}))},VisualTestColorpickerClearValue={name:"Clear colorpicker value",args:{label:"Should clear colorpicker value"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const colorValue=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByLabelText("colorpicker-color-value");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.clear(colorValue),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue.value).toEqual("")}))},VisualTestColorpickerReadonly={name:"Render readonly colorpicker",args:{label:"Should render readonly colorpicker",readonly:!0},play:({canvasElement:canvasElement})=>{const colorValue=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByLabelText("colorpicker-color-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(colorValue).toHaveAttribute("readonly")}},VisualTestColorpickerDisabledColorLabels={name:"Render colorpicker without color labels",args:{label:"Should render colorpicker without color labels",colorLabels:!1},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const pickerToggle=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByLabelText("colorpicker-toggle");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(pickerToggle);const popover=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.getElementsByClassName("sw-popover__wrapper")[0]),hexInput=popover.getByLabelText("hex-value");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput).toBeDefined(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexInput.value).toEqual("#0fcff5");const hexLabel=popover.queryByText("HEX"),rLabel=popover.queryByText("R"),gLabel=popover.queryByText("G"),bLabel=popover.queryByText("B"),alphaLabel=popover.queryByText("Alpha");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(hexLabel).toEqual(null),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(rLabel).toEqual(null),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(gLabel).toEqual(null),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(bLabel).toEqual(null),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(alphaLabel).toEqual(null)}))},VisualTestColorpickerWithHelpText={name:"Render colorpicker with help text",args:{helpText:"Text for helping you"},play:({canvasElement:canvasElement})=>(0,tslib__WEBPACK_IMPORTED_MODULE_3__.mG)(void 0,void 0,void 0,(function*(){const tooltip=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement).getByRole("tooltip");yield _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.hover(tooltip),yield new Promise(((resolve,reject)=>{const waitUntilElementLoad=(retryTime=0)=>{retryTime>100&&reject(),document.querySelector('[aria-label="currently-opened-tooltip"]')?resolve():window.setTimeout((()=>waitUntilElementLoad(retryTime+1)),25)};waitUntilElementLoad()}));const openedTooltip=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(document.querySelector('[aria-label="currently-opened-tooltip"]').parentElement).getByLabelText("currently-opened-tooltip");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(openedTooltip).not.toEqual(null),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(openedTooltip.innerText).toEqual("Text for helping you")}))};VisualTestRenderColorpicker.parameters=Object.assign(Object.assign({},VisualTestRenderColorpicker.parameters),{docs:Object.assign(Object.assign({},null===(_a=VisualTestRenderColorpicker.parameters)||void 0===_a?void 0:_a.docs),{source:Object.assign({originalSource:"{\n  name: 'Render colorpicker'\n}"},null===(_c=null===(_b=VisualTestRenderColorpicker.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),VisualTestOpenColorpicker.parameters=Object.assign(Object.assign({},VisualTestOpenColorpicker.parameters),{docs:Object.assign(Object.assign({},null===(_d=VisualTestOpenColorpicker.parameters)||void 0===_d?void 0:_d.docs),{source:Object.assign({originalSource:"{\n  name: 'Open colorpicker',\n  args: {\n    value: 'rgba(72, 228, 37, 0.81)'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // todo: figure out what element this is\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const colorRange = popover.getByLabelText<HTMLInputElement>('colorpicker-color-range');\n    const alphaRange = popover.getByLabelText<HTMLInputElement>('colorpicker-alpha-range');\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    const redInput = popover.getByLabelText<HTMLInputElement>('red-value');\n    const greenInput = popover.getByLabelText<HTMLInputElement>('green-value');\n    const blueInput = popover.getByLabelText<HTMLInputElement>('blue-value');\n    const alphaInput = popover.getByLabelText<HTMLInputElement>('alpha-value');\n    expect(colorRange).toBeDefined();\n    expect(colorRange.value).toEqual('109');\n    expect(alphaRange).toBeDefined();\n    expect(alphaRange.value).toEqual('0.81');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#48e425cf');\n    expect(redInput).toBeDefined();\n    expect(redInput.value).toEqual('72');\n    expect(greenInput).toBeDefined();\n    expect(greenInput.value).toEqual('228');\n    expect(blueInput).toBeDefined();\n    expect(blueInput.value).toEqual('37');\n    expect(alphaInput).toBeDefined();\n    expect(alphaInput.value).toEqual('81');\n  }\n}"},null===(_f=null===(_e=VisualTestOpenColorpicker.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})}),VisualTestChangeColorpickerColor.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerColor.parameters),{docs:Object.assign(Object.assign({},null===(_g=VisualTestChangeColorpickerColor.parameters)||void 0===_g?void 0:_g.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker color',\n  args: {\n    value: 'rgba(72, 228, 37, 0.81)'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const colorRange = popover.getByLabelText<HTMLInputElement>('colorpicker-color-range');\n    const alphaRange = popover.getByLabelText<HTMLInputElement>('colorpicker-alpha-range');\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    const redInput = popover.getByLabelText<HTMLInputElement>('red-value');\n    const greenInput = popover.getByLabelText<HTMLInputElement>('green-value');\n    const blueInput = popover.getByLabelText<HTMLInputElement>('blue-value');\n    const alphaInput = popover.getByLabelText<HTMLInputElement>('alpha-value');\n    expect(colorRange).toBeDefined();\n    expect(colorRange.value).toEqual('109');\n    expect(alphaRange).toBeDefined();\n    expect(alphaRange.value).toEqual('0.81');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#48e425cf');\n    expect(redInput).toBeDefined();\n    expect(redInput.value).toEqual('72');\n    expect(greenInput).toBeDefined();\n    expect(greenInput.value).toEqual('228');\n    expect(blueInput).toBeDefined();\n    expect(blueInput.value).toEqual('37');\n    expect(alphaInput).toBeDefined();\n    expect(alphaInput.value).toEqual('81');\n\n    // Change colors\n    fireEvent.input(colorRange, {\n      target: {\n        value: 300\n      }\n    });\n    fireEvent.input(alphaRange, {\n      target: {\n        value: 1\n      }\n    });\n    expect(colorRange.value).toEqual('300');\n    expect(alphaRange.value).toEqual('1');\n    await userEvent.clear(redInput);\n    await userEvent.type(redInput, '240');\n    await userEvent.clear(greenInput);\n    await userEvent.type(greenInput, '60');\n    await userEvent.clear(blueInput);\n    await userEvent.type(blueInput, '150');\n    expect(redInput.value).toEqual('240');\n    expect(greenInput.value).toEqual('60');\n    expect(blueInput.value).toEqual('150');\n    expect(hexInput.value).toEqual('#f03c96');\n  }\n}"},null===(_j=null===(_h=VisualTestChangeColorpickerColor.parameters)||void 0===_h?void 0:_h.docs)||void 0===_j?void 0:_j.source)})}),VisualTestChangeColorpickerLabel.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerLabel.parameters),{docs:Object.assign(Object.assign({},null===(_k=VisualTestChangeColorpickerLabel.parameters)||void 0===_k?void 0:_k.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker label',\n  args: {\n    label: 'Another label'\n  }\n}"},null===(_m=null===(_l=VisualTestChangeColorpickerLabel.parameters)||void 0===_l?void 0:_l.docs)||void 0===_m?void 0:_m.source)})}),VisualTestChangeColorpickerOutputHex.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerOutputHex.parameters),{docs:Object.assign(Object.assign({},null===(_o=VisualTestChangeColorpickerOutputHex.parameters)||void 0===_o?void 0:_o.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker output to HEX',\n  args: {\n    label: 'Should output HEX',\n    colorOutput: 'hex'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff5');\n    const colorValue = canvas.getByLabelText<HTMLInputElement>('colorpicker-color-value');\n    expect(colorValue).toBeDefined();\n    expect(colorValue.value).toEqual('#0fcff5');\n  }\n}"},null===(_q=null===(_p=VisualTestChangeColorpickerOutputHex.parameters)||void 0===_p?void 0:_p.docs)||void 0===_q?void 0:_q.source)})}),VisualTestChangeColorpickerOutputHsl.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerOutputHsl.parameters),{docs:Object.assign(Object.assign({},null===(_r=VisualTestChangeColorpickerOutputHsl.parameters)||void 0===_r?void 0:_r.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker output to HSL',\n  args: {\n    label: 'Should output HSL',\n    colorOutput: 'hsl'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff5');\n    const colorValue = canvas.getByLabelText<HTMLInputElement>('colorpicker-color-value');\n    expect(colorValue).toBeDefined();\n    expect(colorValue.value).toEqual('hsl(190, 92%, 51%)');\n  }\n}"},null===(_t=null===(_s=VisualTestChangeColorpickerOutputHsl.parameters)||void 0===_s?void 0:_s.docs)||void 0===_t?void 0:_t.source)})}),VisualTestChangeColorpickerOutputRgb.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerOutputRgb.parameters),{docs:Object.assign(Object.assign({},null===(_u=VisualTestChangeColorpickerOutputRgb.parameters)||void 0===_u?void 0:_u.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker output to RGB',\n  args: {\n    label: 'Should output RGB',\n    colorOutput: 'rgb'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff5');\n    const colorValue = canvas.getByLabelText<HTMLInputElement>('colorpicker-color-value');\n    expect(colorValue).toBeDefined();\n    expect(colorValue.value).toEqual('rgb(15, 207, 245)');\n  }\n}"},null===(_w=null===(_v=VisualTestChangeColorpickerOutputRgb.parameters)||void 0===_v?void 0:_v.docs)||void 0===_w?void 0:_w.source)})}),VisualTestChangeColorpickerOutputHexAlpha.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerOutputHexAlpha.parameters),{docs:Object.assign(Object.assign({},null===(_x=VisualTestChangeColorpickerOutputHexAlpha.parameters)||void 0===_x?void 0:_x.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker output to HEX alpha',\n  args: {\n    value: '#0fcff582',\n    label: 'Should output HEX',\n    colorOutput: 'hex'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff582');\n    const colorValue = canvas.getByLabelText<HTMLInputElement>('colorpicker-color-value');\n    expect(colorValue).toBeDefined();\n    expect(colorValue.value).toEqual('#0fcff582');\n  }\n}"},null===(_z=null===(_y=VisualTestChangeColorpickerOutputHexAlpha.parameters)||void 0===_y?void 0:_y.docs)||void 0===_z?void 0:_z.source)})}),VisualTestChangeColorpickerOutputHslAlpha.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerOutputHslAlpha.parameters),{docs:Object.assign(Object.assign({},null===(_0=VisualTestChangeColorpickerOutputHslAlpha.parameters)||void 0===_0?void 0:_0.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker output to HSL alpha',\n  args: {\n    value: '#0fcff582',\n    label: 'Should output HSL',\n    colorOutput: 'hsl'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff582');\n    const colorValue = canvas.getByLabelText<HTMLInputElement>('colorpicker-color-value');\n    expect(colorValue).toBeDefined();\n    expect(colorValue.value).toEqual('hsla(190, 92%, 51%, 0.51)');\n  }\n}"},null===(_2=null===(_1=VisualTestChangeColorpickerOutputHslAlpha.parameters)||void 0===_1?void 0:_1.docs)||void 0===_2?void 0:_2.source)})}),VisualTestChangeColorpickerOutputRgbAlpha.parameters=Object.assign(Object.assign({},VisualTestChangeColorpickerOutputRgbAlpha.parameters),{docs:Object.assign(Object.assign({},null===(_3=VisualTestChangeColorpickerOutputRgbAlpha.parameters)||void 0===_3?void 0:_3.docs),{source:Object.assign({originalSource:"{\n  name: 'Change colorpicker output to RGB alpha',\n  args: {\n    label: 'Should output RGB',\n    value: '#0fcff582',\n    colorOutput: 'rgb'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff582');\n    const colorValue = canvas.getByLabelText<HTMLInputElement>('colorpicker-color-value');\n    expect(colorValue).toBeDefined();\n    expect(colorValue.value).toEqual('rgba(15, 207, 245, 0.51)');\n  }\n}"},null===(_5=null===(_4=VisualTestChangeColorpickerOutputRgbAlpha.parameters)||void 0===_4?void 0:_4.docs)||void 0===_5?void 0:_5.source)})}),VisualTestColorpickerWithoutAlpha.parameters=Object.assign(Object.assign({},VisualTestColorpickerWithoutAlpha.parameters),{docs:Object.assign(Object.assign({},null===(_6=VisualTestColorpickerWithoutAlpha.parameters)||void 0===_6?void 0:_6.docs),{source:Object.assign({originalSource:"{\n  name: 'Render colorpicker without alpha',\n  args: {\n    label: 'Should render without alpha value',\n    alpha: false\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff5');\n    const alphaInput = popover.queryByLabelText('alpha-value');\n    expect(alphaInput).toEqual(null);\n  }\n}"},null===(_8=null===(_7=VisualTestColorpickerWithoutAlpha.parameters)||void 0===_7?void 0:_7.docs)||void 0===_8?void 0:_8.source)})}),VisualTestColorpickerDisabled.parameters=Object.assign(Object.assign({},VisualTestColorpickerDisabled.parameters),{docs:Object.assign(Object.assign({},null===(_9=VisualTestColorpickerDisabled.parameters)||void 0===_9?void 0:_9.docs),{source:Object.assign({originalSource:"{\n  name: 'Render disabled colorpicker',\n  args: {\n    label: 'Should render disabled colorpicker',\n    disabled: true\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Expect no popover\n    expect(document.getElementsByClassName('sw-popover__wrapper').length).toEqual(0);\n  }\n}"},null===(_11=null===(_10=VisualTestColorpickerDisabled.parameters)||void 0===_10?void 0:_10.docs)||void 0===_11?void 0:_11.source)})}),VisualTestColorpickerClearValue.parameters=Object.assign(Object.assign({},VisualTestColorpickerClearValue.parameters),{docs:Object.assign(Object.assign({},null===(_12=VisualTestColorpickerClearValue.parameters)||void 0===_12?void 0:_12.docs),{source:Object.assign({originalSource:"{\n  name: 'Clear colorpicker value',\n  args: {\n    label: 'Should clear colorpicker value'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const colorValue = canvas.getByLabelText<HTMLInputElement>('colorpicker-color-value');\n    await userEvent.clear(colorValue);\n    expect(colorValue.value).toEqual('');\n  }\n}"},null===(_14=null===(_13=VisualTestColorpickerClearValue.parameters)||void 0===_13?void 0:_13.docs)||void 0===_14?void 0:_14.source)})}),VisualTestColorpickerReadonly.parameters=Object.assign(Object.assign({},VisualTestColorpickerReadonly.parameters),{docs:Object.assign(Object.assign({},null===(_15=VisualTestColorpickerReadonly.parameters)||void 0===_15?void 0:_15.docs),{source:Object.assign({originalSource:"{\n  name: 'Render readonly colorpicker',\n  args: {\n    label: 'Should render readonly colorpicker',\n    readonly: true\n  },\n  play: ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const colorValue = canvas.getByLabelText('colorpicker-color-value');\n    // @ts-expect-error - fix jest matchers\n    expect(colorValue).toHaveAttribute('readonly');\n  }\n}"},null===(_17=null===(_16=VisualTestColorpickerReadonly.parameters)||void 0===_16?void 0:_16.docs)||void 0===_17?void 0:_17.source)})}),VisualTestColorpickerDisabledColorLabels.parameters=Object.assign(Object.assign({},VisualTestColorpickerDisabledColorLabels.parameters),{docs:Object.assign(Object.assign({},null===(_18=VisualTestColorpickerDisabledColorLabels.parameters)||void 0===_18?void 0:_18.docs),{source:Object.assign({originalSource:"{\n  name: 'Render colorpicker without color labels',\n  args: {\n    label: 'Should render colorpicker without color labels',\n    colorLabels: false\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const pickerToggle = canvas.getByLabelText('colorpicker-toggle');\n    await userEvent.click(pickerToggle);\n\n    // Look inside the popover\n    const popover = within((document.getElementsByClassName('sw-popover__wrapper')[0] as HTMLElement));\n    const hexInput = popover.getByLabelText<HTMLInputElement>('hex-value');\n    expect(hexInput).toBeDefined();\n    expect(hexInput.value).toEqual('#0fcff5');\n    const hexLabel = popover.queryByText('HEX');\n    const rLabel = popover.queryByText('R');\n    const gLabel = popover.queryByText('G');\n    const bLabel = popover.queryByText('B');\n    const alphaLabel = popover.queryByText('Alpha');\n    expect(hexLabel).toEqual(null);\n    expect(rLabel).toEqual(null);\n    expect(gLabel).toEqual(null);\n    expect(bLabel).toEqual(null);\n    expect(alphaLabel).toEqual(null);\n  }\n}"},null===(_20=null===(_19=VisualTestColorpickerDisabledColorLabels.parameters)||void 0===_19?void 0:_19.docs)||void 0===_20?void 0:_20.source)})}),VisualTestColorpickerWithHelpText.parameters=Object.assign(Object.assign({},VisualTestColorpickerWithHelpText.parameters),{docs:Object.assign(Object.assign({},null===(_21=VisualTestColorpickerWithHelpText.parameters)||void 0===_21?void 0:_21.docs),{source:Object.assign({originalSource:"{\n  name: 'Render colorpicker with help text',\n  args: {\n    helpText: 'Text for helping you'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const tooltip = canvas.getByRole('tooltip');\n    await userEvent.hover(tooltip);\n\n    // wait until tooltip gets rendered\n    await (() => {\n      return new Promise((resolve, reject) => {\n        const waitUntilElementLoad = (retryTime = 0) => {\n          // do not wait longer than 2.5 seconds\n          if (retryTime > 100) {\n            reject();\n          }\n\n          // check for tooltip\n          const result = document.querySelector('[aria-label=\"currently-opened-tooltip\"]');\n\n          // retry selection when not found otherwise resolve it\n          if (!result) {\n            window.setTimeout(() => waitUntilElementLoad(retryTime + 1), 25);\n          } else {\n            // @ts-expect-error - why does this expect an argument?\n            resolve();\n          }\n        };\n        waitUntilElementLoad();\n      });\n    })();\n\n    // @ts-expect-error -  we know that the tooltip is rendered at this point\n    const tooltipElement = within(document.querySelector('[aria-label=\"currently-opened-tooltip\"]').parentElement);\n    const openedTooltip = tooltipElement.getByLabelText('currently-opened-tooltip');\n    expect(openedTooltip).not.toEqual(null);\n    expect(openedTooltip.innerText).toEqual('Text for helping you');\n  }\n}"},null===(_23=null===(_22=VisualTestColorpickerWithHelpText.parameters)||void 0===_22?void 0:_22.docs)||void 0===_23?void 0:_23.source)})})},"?4f7e":function(){}}]);