import{d as y,e as l,f as t,w as a,o as n,g as _,t as i,k as o,q as v,u as V,l as x}from"./vue.esm-bundler-f31f98e0.js";import{S as k}from"./sw-base-field-a1266e44.js";import{S}from"./sw-field-error-de94aec2.js";import{_ as T}from"./_plugin-vue_export-helper-c27b6911.js";import"./tooltip.directive-6ca7427e.js";import"./sw-icon-c55f7719.js";import"./iframe-d923d319.js";import"../sb-preview/runtime.js";import"./index-76fb7be0.js";import"./_commonjsHelpers-de833af9.js";import"./isObject-32699ff3.js";const b=y({name:"SwProgressBar",components:{"sw-base-field":k,"sw-field-error":S},props:{modelValue:{type:Number,default:0},maxValue:{type:Number,default:100,required:!1},label:{type:String,required:!1,default:null},progressLabelType:{type:String,required:!1,default:"percent"},error:{type:Object,required:!1,default:null}},computed:{progressLabel(){return!this.progressLabelType||this.progressLabelType==="percent"?this.styleWidth:`${this.modelValue} ${this.progressLabelType} / ${this.maxValue} ${this.progressLabelType}`},styleWidth(){let e=parseInt(this.modelValue/this.maxValue*100);return e>100&&(e=100),e<0&&(e=0),`${e}%`},progressClasses(){return{"sw-progress-bar__value--no-transition":this.modelValue<1||this.modelValue>=this.maxValue,"sw-progress-bar__value--has-error":!!this.error}}}});const L={class:"sw-progress-bar__progress-label"},C={class:"sw-progress-bar__total"};function q(e,E,$,B,N,F){const h=l("sw-field-error"),w=l("sw-base-field");return n(),t(w,{class:"sw-progress-bar",role:"progressbar","aria-valuenow":e.modelValue,"aria-valuemax":e.maxValue,"aria-label":"Current progress","has-focus":!1},{label:a(()=>[_(i(e.label)+" ",1),o("span",L,i(e.progressLabel),1)]),element:a(()=>[o("div",C,[o("div",{class:v(["sw-progress-bar__value",e.progressClasses]),"data-testid":"progress-bar-value",style:V({width:e.styleWidth})},null,6)])]),error:a(()=>[e.error?(n(),t(h,{key:0,error:e.error},null,8,["error"])):x("",!0)]),_:1},8,["aria-valuenow","aria-valuemax"])}const p=T(b,[["render",q]]);b.__docgenInfo={displayName:"SwProgressBar",exportName:"default",description:"",tags:{},props:[{name:"modelValue",description:"The current value which is used for showing the current progress.",type:{name:"number"},defaultValue:{func:!1,value:"0"}},{name:"maxValue",description:"The max value sets the value where the progress will be finished.",type:{name:"number"},required:!1,defaultValue:{func:!1,value:"100"}},{name:"label",description:"A label for the progress bar. Usually used to guide the user what value kind of activity is currently running.",type:{name:"string"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"progressLabelType",description:'Change how the progress label looks like. Examples are "kb", "mb", "items" or more. For percentage just use "percentage"',tags:{example:[{description:'"kb"',title:"example"}]},type:{name:"string"},required:!1,defaultValue:{func:!1,value:'"percent"'}},{name:"error",description:"An error in your business logic related to this field.",tags:{example:[{description:'{"code": 500, "detail": "Error while loading"}',title:"example"}]},type:{name:"object"},required:!1,defaultValue:{func:!1,value:"null"}}],sourceFiles:["/home/runner/work/meteor-component-library/meteor-component-library/src/components/feedback-indicator/sw-progress-bar/sw-progress-bar.vue"]};const H={title:"Components/Feedback Indicator/sw-progress-bar",component:p,render:e=>({setup(){return{args:e}},components:{SwProgressBar:p},template:'<sw-progress-bar v-bind="args"></sw-progress-bar>'}),args:{modelValue:121,maxValue:356,label:"Example progress bar",error:void 0,progressLabelType:""}},r={name:"Minimal"},s={args:{modelValue:277,error:{code:500,detail:"Error while loading"},progressLabelType:"kb"}};var u,d,m;r.parameters={...r.parameters,docs:{...(u=r.parameters)==null?void 0:u.docs,source:{originalSource:`{
  name: "Minimal"
}`,...(m=(d=r.parameters)==null?void 0:d.docs)==null?void 0:m.source}}};var c,g,f;s.parameters={...s.parameters,docs:{...(c=s.parameters)==null?void 0:c.docs,source:{originalSource:`{
  args: {
    modelValue: 277,
    error: {
      code: 500,
      detail: "Error while loading"
    },
    progressLabelType: "kb"
  }
}`,...(f=(g=s.parameters)==null?void 0:g.docs)==null?void 0:f.source}}};const J=["Default","Extended"];export{r as Default,s as Extended,J as __namedExportsOrder,H as default};
