"use strict";(self.webpackChunk_shopware_ag_meteor_component_library=self.webpackChunk_shopware_ag_meteor_component_library||[]).push([[31027],{"./src/components/form/sw-textarea/sw-textarea.interactive.stories.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{TestInputValue:function(){return TestInputValue},TestLabel:function(){return TestLabel},TestPlaceholder:function(){return TestPlaceholder},VisualTestDisabled:function(){return VisualTestDisabled},VisualTestError:function(){return VisualTestError},VisualTestHint:function(){return VisualTestHint},__namedExportsOrder:function(){return __namedExportsOrder}});var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),_storybook_jest__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/jest/dist/esm/index.js"),_sw_textarea_stories__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/form/sw-textarea/sw-textarea.stories.js");__webpack_exports__.default={..._sw_textarea_stories__WEBPACK_IMPORTED_MODULE_2__.default,title:"Interaction Tests/Form/sw-textarea"};const TestInputValue={name:"Should keep input value",play:async({canvasElement:canvasElement,args:args})=>{const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement);await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.type(canvas.getByRole("textbox"),"Shopware"),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.click(canvas.getByText("hidden")),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(canvas.getByRole("textbox").value).toBe("Shopware"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(args.change).toHaveBeenCalledWith("Shopware")}},VisualTestHint={name:"Should display hint",args:{hint:"hint"},play:({canvasElement:canvasElement,args:args})=>{const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement);(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(canvas.getByText(args.hint)).toBeDefined()}},TestLabel={name:"Should display label",args:{label:"label"},play:({canvasElement:canvasElement,args:args})=>{const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement);(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(canvas.getByText(args.label)).toBeDefined()}},VisualTestDisabled={name:"Should disable",args:{disabled:!0,value:"Shopware"},play:async({canvasElement:canvasElement})=>{const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement);await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.mV.type(canvas.getByRole("textbox"),"1337"),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(canvas.getByRole("textbox").value).toBe("Shopware")}},TestPlaceholder={name:"Should display placeholder",args:{placeholder:"Placeholder"},play:({canvasElement:canvasElement,args:args})=>{const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement);(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(canvas.getByPlaceholderText(args.placeholder)).toBeDefined()}},VisualTestError={name:"Should display error",args:{error:{code:500,detail:"Error while saving!"}},play:({canvasElement:canvasElement,args:args})=>{const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.uh)(canvasElement);(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__.l)(canvas.getByText(args.error.detail)).toBeDefined()}};TestInputValue.parameters={...TestInputValue.parameters,docs:{...TestInputValue.parameters?.docs,source:{originalSource:"{\n  name: 'Should keep input value',\n  play: async ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByRole('textbox'), 'Shopware');\n    await userEvent.click(canvas.getByText('hidden'));\n    expect(canvas.getByRole('textbox').value).toBe('Shopware');\n    expect(args.change).toHaveBeenCalledWith('Shopware');\n  }\n}",...TestInputValue.parameters?.docs?.source}}},VisualTestHint.parameters={...VisualTestHint.parameters,docs:{...VisualTestHint.parameters?.docs,source:{originalSource:"{\n  name: 'Should display hint',\n  args: {\n    hint: 'hint'\n  },\n  play: ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(args.hint)).toBeDefined();\n  }\n}",...VisualTestHint.parameters?.docs?.source}}},TestLabel.parameters={...TestLabel.parameters,docs:{...TestLabel.parameters?.docs,source:{originalSource:"{\n  name: 'Should display label',\n  args: {\n    label: 'label'\n  },\n  play: ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(args.label)).toBeDefined();\n  }\n}",...TestLabel.parameters?.docs?.source}}},VisualTestDisabled.parameters={...VisualTestDisabled.parameters,docs:{...VisualTestDisabled.parameters?.docs,source:{originalSource:"{\n  name: 'Should disable',\n  args: {\n    disabled: true,\n    value: 'Shopware'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByRole('textbox'), '1337');\n    expect(canvas.getByRole('textbox').value).toBe('Shopware');\n  }\n}",...VisualTestDisabled.parameters?.docs?.source}}},TestPlaceholder.parameters={...TestPlaceholder.parameters,docs:{...TestPlaceholder.parameters?.docs,source:{originalSource:"{\n  name: 'Should display placeholder',\n  args: {\n    placeholder: 'Placeholder'\n  },\n  play: ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByPlaceholderText(args.placeholder)).toBeDefined();\n  }\n}",...TestPlaceholder.parameters?.docs?.source}}},VisualTestError.parameters={...VisualTestError.parameters,docs:{...VisualTestError.parameters?.docs,source:{originalSource:"{\n  name: 'Should display error',\n  args: {\n    error: {\n      code: 500,\n      detail: \"Error while saving!\"\n    }\n  },\n  play: ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(args.error.detail)).toBeDefined();\n  }\n}",...VisualTestError.parameters?.docs?.source}}};const __namedExportsOrder=["TestInputValue","VisualTestHint","TestLabel","VisualTestDisabled","TestPlaceholder","VisualTestError"]}}]);