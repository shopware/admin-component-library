"use strict";(self.webpackChunk_shopware_ag_meteor_component_library=self.webpackChunk_shopware_ag_meteor_component_library||[]).push([[39447],{"./src/directives/tooltip.interactive.stories.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{VisualTestRenderIcon:function(){return VisualTestRenderIcon},VisualTestRenderTooltip:function(){return VisualTestRenderTooltip},VisualTestRenderTooltipInWide:function(){return VisualTestRenderTooltipInWide},__namedExportsOrder:function(){return __namedExportsOrder}});var _tooltip_stories__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/directives/tooltip.stories.js"),_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),_storybook_jest__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/jest/dist/esm/index.js"),_internal_test_helper__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/_internal/test-helper.js");__webpack_exports__.default={..._tooltip_stories__WEBPACK_IMPORTED_MODULE_0__.default,title:"Interaction Tests/Directives/Tooltip"};const VisualTestRenderIcon={name:"Render icon"},VisualTestRenderTooltip={name:"Render tooltip",args:{message:"This is the help text"},play:async({canvasElement:canvasElement})=>{const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(canvasElement),icon=await canvas.getByTestId("sw-icon__regular-question-circle");await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.hover(icon),await(0,_internal_test_helper__WEBPACK_IMPORTED_MODULE_3__.e)((()=>document.querySelector(".sw-tooltip")));const helpText=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(document.getElementsByClassName("sw-tooltip")[0]).getByText("This is the help text");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.l)(helpText).toBeDefined()}},VisualTestRenderTooltipInWide={name:"Render tooltip in wide",args:{message:"This is the help text",width:300},play:async({canvasElement:canvasElement})=>{const icon=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(canvasElement).getByTestId("sw-icon__regular-question-circle");await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.hover(icon),await(0,_internal_test_helper__WEBPACK_IMPORTED_MODULE_3__.e)((()=>document.querySelector(".sw-tooltip"))),await(0,_internal_test_helper__WEBPACK_IMPORTED_MODULE_3__.e)((()=>document.querySelector(".sw-tooltip")));const helpText=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(document.getElementsByClassName("sw-tooltip")[0]).getByText("This is the help text");(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.l)(helpText).toBeDefined()}};VisualTestRenderIcon.parameters={...VisualTestRenderIcon.parameters,docs:{...VisualTestRenderIcon.parameters?.docs,source:{originalSource:"{\n  name: 'Render icon'\n}",...VisualTestRenderIcon.parameters?.docs?.source}}},VisualTestRenderTooltip.parameters={...VisualTestRenderTooltip.parameters,docs:{...VisualTestRenderTooltip.parameters?.docs,source:{originalSource:"{\n  name: 'Render tooltip',\n  args: {\n    message: 'This is the help text'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const icon = await canvas.getByTestId('sw-icon__regular-question-circle');\n    await userEvent.hover(icon);\n\n    // wait until tooltip is loaded\n    await waitUntilRendered(() => document.querySelector('.sw-tooltip'));\n    const tooltip = within(document.getElementsByClassName('sw-tooltip')[0]);\n    const helpText = tooltip.getByText('This is the help text');\n    expect(helpText).toBeDefined();\n  }\n}",...VisualTestRenderTooltip.parameters?.docs?.source}}},VisualTestRenderTooltipInWide.parameters={...VisualTestRenderTooltipInWide.parameters,docs:{...VisualTestRenderTooltipInWide.parameters?.docs,source:{originalSource:"{\n  name: 'Render tooltip in wide',\n  args: {\n    message: 'This is the help text',\n    width: 300\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const icon = canvas.getByTestId('sw-icon__regular-question-circle');\n    await userEvent.hover(icon);\n\n    // wait until tooltip is loaded\n    await waitUntilRendered(() => document.querySelector('.sw-tooltip'));\n    await waitUntilRendered(() => document.querySelector('.sw-tooltip'));\n    const tooltip = within(document.getElementsByClassName('sw-tooltip')[0]);\n    const helpText = tooltip.getByText('This is the help text');\n    expect(helpText).toBeDefined();\n  }\n}",...VisualTestRenderTooltipInWide.parameters?.docs?.source}}};const __namedExportsOrder=["VisualTestRenderIcon","VisualTestRenderTooltip","VisualTestRenderTooltipInWide"]},"./src/_internal/test-helper.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){function waitUntilRendered(check){return new Promise(((resolve,reject)=>{const waitUntilElementLoad=(retryTime=0)=>{retryTime>100&&reject();check()?resolve():window.setTimeout((()=>waitUntilElementLoad(retryTime+1)),25)};waitUntilElementLoad()}))}__webpack_require__.d(__webpack_exports__,{e:function(){return waitUntilRendered}})}}]);